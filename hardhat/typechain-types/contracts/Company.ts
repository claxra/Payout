/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type EmployeeStruct = {
  pensionStartDate: PromiseOrValue<BigNumberish>;
  pensionDuration: PromiseOrValue<BigNumberish>;
  monthyAmount: PromiseOrValue<BigNumberish>;
  employeeJoiningDate: PromiseOrValue<BigNumberish>;
  employeeLeavingDate: PromiseOrValue<BigNumberish>;
  minimumServiceRequired: PromiseOrValue<BigNumberish>;
};

export type EmployeeStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  pensionStartDate: BigNumber;
  pensionDuration: BigNumber;
  monthyAmount: BigNumber;
  employeeJoiningDate: BigNumber;
  employeeLeavingDate: BigNumber;
  minimumServiceRequired: BigNumber;
};

export interface CompanyInterface extends utils.Interface {
  functions: {
    "addEmployee(address,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "addEmployees(address[],uint256[],uint256[],uint256[],uint256[],uint256[],uint256[])": FunctionFragment;
    "approveCryptoProposal(uint256)": FunctionFragment;
    "approveW2wProposal(uint256)": FunctionFragment;
    "changeName(string)": FunctionFragment;
    "createCryptoProposal(string,string,uint256,uint256,address)": FunctionFragment;
    "createW2wProposal(string,string,uint256,uint256,address)": FunctionFragment;
    "employeeAddresses(uint256)": FunctionFragment;
    "employees(address)": FunctionFragment;
    "finalizeCryptoProposal(uint256)": FunctionFragment;
    "finalizeW2wProposal(uint256)": FunctionFragment;
    "getEmployee(address)": FunctionFragment;
    "getEmployees()": FunctionFragment;
    "initialize(address,string)": FunctionFragment;
    "isAddressInEmployee(address)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "pensionCounter()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "swapRouter()": FunctionFragment;
    "transferFundsToEmployees()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateEmployee(address,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addEmployee"
      | "addEmployees"
      | "approveCryptoProposal"
      | "approveW2wProposal"
      | "changeName"
      | "createCryptoProposal"
      | "createW2wProposal"
      | "employeeAddresses"
      | "employees"
      | "finalizeCryptoProposal"
      | "finalizeW2wProposal"
      | "getEmployee"
      | "getEmployees"
      | "initialize"
      | "isAddressInEmployee"
      | "name"
      | "owner"
      | "pensionCounter"
      | "renounceOwnership"
      | "swapRouter"
      | "transferFundsToEmployees"
      | "transferOwnership"
      | "updateEmployee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addEmployee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addEmployees",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approveCryptoProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveW2wProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createCryptoProposal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createW2wProposal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "employeeAddresses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "employees",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeCryptoProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeW2wProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAddressInEmployee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pensionCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFundsToEmployees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEmployee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addEmployees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveCryptoProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveW2wProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCryptoProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createW2wProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "employeeAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "employees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeCryptoProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeW2wProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAddressInEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pensionCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFundsToEmployees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEmployee",
    data: BytesLike
  ): Result;

  events: {
    "CompanyPensionTransferFailed(address)": EventFragment;
    "CompanyPensionTransferSucceeded(address,uint256)": EventFragment;
    "CryptoProposalCompleted(uint256,bool,uint256)": EventFragment;
    "CryptoProposalCreated(uint256,string,uint256,address)": EventFragment;
    "CryptoProposalVoted(uint256,address,bool)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "W2wProposalCompleted(uint256,bool,uint256)": EventFragment;
    "W2wProposalCreated(uint256,string,uint256,address)": EventFragment;
    "W2wProposalVoted(uint256,address,bool)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "CompanyPensionTransferFailed"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CompanyPensionTransferSucceeded"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CryptoProposalCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CryptoProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CryptoProposalVoted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "W2wProposalCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "W2wProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "W2wProposalVoted"): EventFragment;
}

export interface CompanyPensionTransferFailedEventObject {
  company: string;
}
export type CompanyPensionTransferFailedEvent = TypedEvent<
  [string],
  CompanyPensionTransferFailedEventObject
>;

export type CompanyPensionTransferFailedEventFilter =
  TypedEventFilter<CompanyPensionTransferFailedEvent>;

export interface CompanyPensionTransferSucceededEventObject {
  company: string;
  amount: BigNumber;
}
export type CompanyPensionTransferSucceededEvent = TypedEvent<
  [string, BigNumber],
  CompanyPensionTransferSucceededEventObject
>;

export type CompanyPensionTransferSucceededEventFilter =
  TypedEventFilter<CompanyPensionTransferSucceededEvent>;

export interface CryptoProposalCompletedEventObject {
  proposalId: BigNumber;
  success: boolean;
  amount: BigNumber;
}
export type CryptoProposalCompletedEvent = TypedEvent<
  [BigNumber, boolean, BigNumber],
  CryptoProposalCompletedEventObject
>;

export type CryptoProposalCompletedEventFilter =
  TypedEventFilter<CryptoProposalCompletedEvent>;

export interface CryptoProposalCreatedEventObject {
  proposalId: BigNumber;
  description: string;
  value: BigNumber;
  currencyAddress: string;
}
export type CryptoProposalCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  CryptoProposalCreatedEventObject
>;

export type CryptoProposalCreatedEventFilter =
  TypedEventFilter<CryptoProposalCreatedEvent>;

export interface CryptoProposalVotedEventObject {
  proposalId: BigNumber;
  voter: string;
  vote: boolean;
}
export type CryptoProposalVotedEvent = TypedEvent<
  [BigNumber, string, boolean],
  CryptoProposalVotedEventObject
>;

export type CryptoProposalVotedEventFilter =
  TypedEventFilter<CryptoProposalVotedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface W2wProposalCompletedEventObject {
  proposalId: BigNumber;
  success: boolean;
  amount: BigNumber;
}
export type W2wProposalCompletedEvent = TypedEvent<
  [BigNumber, boolean, BigNumber],
  W2wProposalCompletedEventObject
>;

export type W2wProposalCompletedEventFilter =
  TypedEventFilter<W2wProposalCompletedEvent>;

export interface W2wProposalCreatedEventObject {
  proposalId: BigNumber;
  description: string;
  value: BigNumber;
  targetAddress: string;
}
export type W2wProposalCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  W2wProposalCreatedEventObject
>;

export type W2wProposalCreatedEventFilter =
  TypedEventFilter<W2wProposalCreatedEvent>;

export interface W2wProposalVotedEventObject {
  proposalId: BigNumber;
  voter: string;
  vote: boolean;
}
export type W2wProposalVotedEvent = TypedEvent<
  [BigNumber, string, boolean],
  W2wProposalVotedEventObject
>;

export type W2wProposalVotedEventFilter =
  TypedEventFilter<W2wProposalVotedEvent>;

export interface Company extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CompanyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addEmployee(
      _employeeAddress: PromiseOrValue<string>,
      _pensionStartDate: PromiseOrValue<BigNumberish>,
      _pensionDuration: PromiseOrValue<BigNumberish>,
      _monthyAmount: PromiseOrValue<BigNumberish>,
      _employeeJoiningDate: PromiseOrValue<BigNumberish>,
      _employeeLeavingDate: PromiseOrValue<BigNumberish>,
      _minimumServiceRequired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addEmployees(
      _employeeAddresses: PromiseOrValue<string>[],
      _pensionStartDates: PromiseOrValue<BigNumberish>[],
      _pensionDurations: PromiseOrValue<BigNumberish>[],
      _monthyAmounts: PromiseOrValue<BigNumberish>[],
      _employeeJoiningDates: PromiseOrValue<BigNumberish>[],
      _employeeLeavingDates: PromiseOrValue<BigNumberish>[],
      _minimumServiceRequireds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveCryptoProposal(
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveW2wProposal(
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeName(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createCryptoProposal(
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _currencyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createW2wProposal(
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _targetAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    employeeAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    employees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        pensionStartDate: BigNumber;
        pensionDuration: BigNumber;
        monthyAmount: BigNumber;
        employeeJoiningDate: BigNumber;
        employeeLeavingDate: BigNumber;
        minimumServiceRequired: BigNumber;
      }
    >;

    finalizeCryptoProposal(
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizeW2wProposal(
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getEmployee(
      _employeeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[EmployeeStructOutput]>;

    getEmployees(overrides?: CallOverrides): Promise<[EmployeeStructOutput[]]>;

    initialize(
      _owner: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAddressInEmployee(
      addressToFind: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pensionCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;

    transferFundsToEmployees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateEmployee(
      _employeeAddress: PromiseOrValue<string>,
      _pensionStartDate: PromiseOrValue<BigNumberish>,
      _pensionDuration: PromiseOrValue<BigNumberish>,
      _monthyAmount: PromiseOrValue<BigNumberish>,
      _employeeJoiningDate: PromiseOrValue<BigNumberish>,
      _employeeLeavingDate: PromiseOrValue<BigNumberish>,
      _minimumServiceRequired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addEmployee(
    _employeeAddress: PromiseOrValue<string>,
    _pensionStartDate: PromiseOrValue<BigNumberish>,
    _pensionDuration: PromiseOrValue<BigNumberish>,
    _monthyAmount: PromiseOrValue<BigNumberish>,
    _employeeJoiningDate: PromiseOrValue<BigNumberish>,
    _employeeLeavingDate: PromiseOrValue<BigNumberish>,
    _minimumServiceRequired: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addEmployees(
    _employeeAddresses: PromiseOrValue<string>[],
    _pensionStartDates: PromiseOrValue<BigNumberish>[],
    _pensionDurations: PromiseOrValue<BigNumberish>[],
    _monthyAmounts: PromiseOrValue<BigNumberish>[],
    _employeeJoiningDates: PromiseOrValue<BigNumberish>[],
    _employeeLeavingDates: PromiseOrValue<BigNumberish>[],
    _minimumServiceRequireds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveCryptoProposal(
    proposalIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveW2wProposal(
    proposalIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeName(
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createCryptoProposal(
    _title: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    _currencyAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createW2wProposal(
    _title: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    _targetAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  employeeAddresses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  employees(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      pensionStartDate: BigNumber;
      pensionDuration: BigNumber;
      monthyAmount: BigNumber;
      employeeJoiningDate: BigNumber;
      employeeLeavingDate: BigNumber;
      minimumServiceRequired: BigNumber;
    }
  >;

  finalizeCryptoProposal(
    proposalIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizeW2wProposal(
    proposalIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getEmployee(
    _employeeAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<EmployeeStructOutput>;

  getEmployees(overrides?: CallOverrides): Promise<EmployeeStructOutput[]>;

  initialize(
    _owner: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAddressInEmployee(
    addressToFind: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pensionCounter(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  transferFundsToEmployees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateEmployee(
    _employeeAddress: PromiseOrValue<string>,
    _pensionStartDate: PromiseOrValue<BigNumberish>,
    _pensionDuration: PromiseOrValue<BigNumberish>,
    _monthyAmount: PromiseOrValue<BigNumberish>,
    _employeeJoiningDate: PromiseOrValue<BigNumberish>,
    _employeeLeavingDate: PromiseOrValue<BigNumberish>,
    _minimumServiceRequired: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addEmployee(
      _employeeAddress: PromiseOrValue<string>,
      _pensionStartDate: PromiseOrValue<BigNumberish>,
      _pensionDuration: PromiseOrValue<BigNumberish>,
      _monthyAmount: PromiseOrValue<BigNumberish>,
      _employeeJoiningDate: PromiseOrValue<BigNumberish>,
      _employeeLeavingDate: PromiseOrValue<BigNumberish>,
      _minimumServiceRequired: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addEmployees(
      _employeeAddresses: PromiseOrValue<string>[],
      _pensionStartDates: PromiseOrValue<BigNumberish>[],
      _pensionDurations: PromiseOrValue<BigNumberish>[],
      _monthyAmounts: PromiseOrValue<BigNumberish>[],
      _employeeJoiningDates: PromiseOrValue<BigNumberish>[],
      _employeeLeavingDates: PromiseOrValue<BigNumberish>[],
      _minimumServiceRequireds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    approveCryptoProposal(
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveW2wProposal(
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeName(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createCryptoProposal(
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _currencyAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createW2wProposal(
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    employeeAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    employees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        pensionStartDate: BigNumber;
        pensionDuration: BigNumber;
        monthyAmount: BigNumber;
        employeeJoiningDate: BigNumber;
        employeeLeavingDate: BigNumber;
        minimumServiceRequired: BigNumber;
      }
    >;

    finalizeCryptoProposal(
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeW2wProposal(
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getEmployee(
      _employeeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<EmployeeStructOutput>;

    getEmployees(overrides?: CallOverrides): Promise<EmployeeStructOutput[]>;

    initialize(
      _owner: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isAddressInEmployee(
      addressToFind: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pensionCounter(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    transferFundsToEmployees(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEmployee(
      _employeeAddress: PromiseOrValue<string>,
      _pensionStartDate: PromiseOrValue<BigNumberish>,
      _pensionDuration: PromiseOrValue<BigNumberish>,
      _monthyAmount: PromiseOrValue<BigNumberish>,
      _employeeJoiningDate: PromiseOrValue<BigNumberish>,
      _employeeLeavingDate: PromiseOrValue<BigNumberish>,
      _minimumServiceRequired: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CompanyPensionTransferFailed(address)"(
      company?: PromiseOrValue<string> | null
    ): CompanyPensionTransferFailedEventFilter;
    CompanyPensionTransferFailed(
      company?: PromiseOrValue<string> | null
    ): CompanyPensionTransferFailedEventFilter;

    "CompanyPensionTransferSucceeded(address,uint256)"(
      company?: PromiseOrValue<string> | null,
      amount?: null
    ): CompanyPensionTransferSucceededEventFilter;
    CompanyPensionTransferSucceeded(
      company?: PromiseOrValue<string> | null,
      amount?: null
    ): CompanyPensionTransferSucceededEventFilter;

    "CryptoProposalCompleted(uint256,bool,uint256)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      success?: null,
      amount?: null
    ): CryptoProposalCompletedEventFilter;
    CryptoProposalCompleted(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      success?: null,
      amount?: null
    ): CryptoProposalCompletedEventFilter;

    "CryptoProposalCreated(uint256,string,uint256,address)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      description?: null,
      value?: null,
      currencyAddress?: null
    ): CryptoProposalCreatedEventFilter;
    CryptoProposalCreated(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      description?: null,
      value?: null,
      currencyAddress?: null
    ): CryptoProposalCreatedEventFilter;

    "CryptoProposalVoted(uint256,address,bool)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      voter?: PromiseOrValue<string> | null,
      vote?: null
    ): CryptoProposalVotedEventFilter;
    CryptoProposalVoted(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      voter?: PromiseOrValue<string> | null,
      vote?: null
    ): CryptoProposalVotedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "W2wProposalCompleted(uint256,bool,uint256)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      success?: null,
      amount?: null
    ): W2wProposalCompletedEventFilter;
    W2wProposalCompleted(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      success?: null,
      amount?: null
    ): W2wProposalCompletedEventFilter;

    "W2wProposalCreated(uint256,string,uint256,address)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      description?: null,
      value?: null,
      targetAddress?: null
    ): W2wProposalCreatedEventFilter;
    W2wProposalCreated(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      description?: null,
      value?: null,
      targetAddress?: null
    ): W2wProposalCreatedEventFilter;

    "W2wProposalVoted(uint256,address,bool)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      voter?: PromiseOrValue<string> | null,
      vote?: null
    ): W2wProposalVotedEventFilter;
    W2wProposalVoted(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      voter?: PromiseOrValue<string> | null,
      vote?: null
    ): W2wProposalVotedEventFilter;
  };

  estimateGas: {
    addEmployee(
      _employeeAddress: PromiseOrValue<string>,
      _pensionStartDate: PromiseOrValue<BigNumberish>,
      _pensionDuration: PromiseOrValue<BigNumberish>,
      _monthyAmount: PromiseOrValue<BigNumberish>,
      _employeeJoiningDate: PromiseOrValue<BigNumberish>,
      _employeeLeavingDate: PromiseOrValue<BigNumberish>,
      _minimumServiceRequired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addEmployees(
      _employeeAddresses: PromiseOrValue<string>[],
      _pensionStartDates: PromiseOrValue<BigNumberish>[],
      _pensionDurations: PromiseOrValue<BigNumberish>[],
      _monthyAmounts: PromiseOrValue<BigNumberish>[],
      _employeeJoiningDates: PromiseOrValue<BigNumberish>[],
      _employeeLeavingDates: PromiseOrValue<BigNumberish>[],
      _minimumServiceRequireds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveCryptoProposal(
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveW2wProposal(
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeName(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createCryptoProposal(
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _currencyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createW2wProposal(
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _targetAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    employeeAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    employees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalizeCryptoProposal(
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizeW2wProposal(
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getEmployee(
      _employeeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEmployees(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAddressInEmployee(
      addressToFind: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pensionCounter(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    transferFundsToEmployees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateEmployee(
      _employeeAddress: PromiseOrValue<string>,
      _pensionStartDate: PromiseOrValue<BigNumberish>,
      _pensionDuration: PromiseOrValue<BigNumberish>,
      _monthyAmount: PromiseOrValue<BigNumberish>,
      _employeeJoiningDate: PromiseOrValue<BigNumberish>,
      _employeeLeavingDate: PromiseOrValue<BigNumberish>,
      _minimumServiceRequired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addEmployee(
      _employeeAddress: PromiseOrValue<string>,
      _pensionStartDate: PromiseOrValue<BigNumberish>,
      _pensionDuration: PromiseOrValue<BigNumberish>,
      _monthyAmount: PromiseOrValue<BigNumberish>,
      _employeeJoiningDate: PromiseOrValue<BigNumberish>,
      _employeeLeavingDate: PromiseOrValue<BigNumberish>,
      _minimumServiceRequired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addEmployees(
      _employeeAddresses: PromiseOrValue<string>[],
      _pensionStartDates: PromiseOrValue<BigNumberish>[],
      _pensionDurations: PromiseOrValue<BigNumberish>[],
      _monthyAmounts: PromiseOrValue<BigNumberish>[],
      _employeeJoiningDates: PromiseOrValue<BigNumberish>[],
      _employeeLeavingDates: PromiseOrValue<BigNumberish>[],
      _minimumServiceRequireds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveCryptoProposal(
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveW2wProposal(
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeName(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createCryptoProposal(
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _currencyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createW2wProposal(
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _targetAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    employeeAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    employees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizeCryptoProposal(
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizeW2wProposal(
      proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getEmployee(
      _employeeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEmployees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAddressInEmployee(
      addressToFind: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pensionCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFundsToEmployees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateEmployee(
      _employeeAddress: PromiseOrValue<string>,
      _pensionStartDate: PromiseOrValue<BigNumberish>,
      _pensionDuration: PromiseOrValue<BigNumberish>,
      _monthyAmount: PromiseOrValue<BigNumberish>,
      _employeeJoiningDate: PromiseOrValue<BigNumberish>,
      _employeeLeavingDate: PromiseOrValue<BigNumberish>,
      _minimumServiceRequired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
